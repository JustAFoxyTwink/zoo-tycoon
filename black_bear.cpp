/********************************************************
 * Program Filename: black_bear.cpp
 * Author: Evan Garrison
 * Date: 05/14/2021
 * Description: BlackBear class implementation file
 * Input: BlackBear name, class, bank size
 * Output: BlackBear status, price, revenue generated.
 ********************************************************/

#include "black_bear.h" //include header file

/********************************************************
 * Function: BlackBear Constructor
 * Description: Constructor for BlackBear class
 * Parameters: n - name of bear, a - age of bear
 * Pre-Conditions: Bear has not been created
 * Post-Conditions: Bear has been created with name n and age a
 ********************************************************/
BlackBear::BlackBear(std::string n, int a) : Animal(n, a) {
}

/********************************************************
 * Function: BlackBear default Constructor
 * Description: Default Constructor for BlackBear class
 * Parameters: none
 * Pre-Conditions: Bear has not been created
 * Post-Conditions: Bear is created with no name, age 0
 ********************************************************/
BlackBear::BlackBear() : Animal() {
}

/********************************************************
 * Function: getRevenue
 * Description: gets revenue generated by blackbears
 * Parameters: none
 * Pre-Conditions: caller doesn't have revenue generated
 * Post-Conditions: caller has been given revenue value
 ********************************************************/
int BlackBear::getRevenue() const {
    return revenue; //returns revenue to caller
}

/********************************************************
 * Function: getPrice
 * Description: gets price of Black Bear
 * Parameters: none
 * Pre-Conditions: caller doesn't have price of Bear
 * Post-Conditions: caller has been give price
 ********************************************************/
int BlackBear::getPrice() const {
    return price; //returns price to caller
}

/********************************************************
 * Function: advanceMonth
 * Description: advances month for Black bear, calculates cost and revenue generated,
 * heals/kills is sick.
 * Parameters: &costs - reference to running cost, &rev - reference to
 * running revenue, &bank - const reference to money in bank
 * Pre-Conditions: Bear still has values and conditions from  last month
 * Post-Conditions: Bears condition has been advanced, revenue and cost
 * has been added to running tally
 ********************************************************/
void BlackBear::advanceMonth(int &costs, int &rev, const int &bank) {
    Animal::advanceMonth(costs); //calls base function for advancing month

    //if the animals sick, heal/kill it
    if (getSick())
        heal(costs, bank, getPrice());

    /*
     * If the animal isn't dead, this calculated revenue generated and adds it to the
     * to the running revenue. revenue generated for babies is double the normal.
     */
    if (!getDead()) {
        if (getLifeStage() == BABY)
            rev += getRevenue() * 2;
        else
            rev += getRevenue();
    }
}